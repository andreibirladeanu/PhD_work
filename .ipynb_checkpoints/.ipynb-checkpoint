{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IDnumber</th>\n",
       "      <th>gender</th>\n",
       "      <th>AgeT1</th>\n",
       "      <th>AgeT2</th>\n",
       "      <th>dropoutT2</th>\n",
       "      <th>newT1RInAB</th>\n",
       "      <th>newT2RInAB</th>\n",
       "      <th>newT1cutoffRInAB</th>\n",
       "      <th>newT2cutoffRInAB</th>\n",
       "      <th>minimalsymtpomsornotT1</th>\n",
       "      <th>...</th>\n",
       "      <th>DAIdifferencescore</th>\n",
       "      <th>DAIimprovementscore</th>\n",
       "      <th>RInABV4T1</th>\n",
       "      <th>RInABV4CutOffT1</th>\n",
       "      <th>RInABV4T2</th>\n",
       "      <th>RInABV4CutOffT2</th>\n",
       "      <th>V4_reliability_T1</th>\n",
       "      <th>V4_reliability_T1_Cut_Off</th>\n",
       "      <th>V4_reliability_T2</th>\n",
       "      <th>V4_realiability_T2_Cut_Off</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1004</td>\n",
       "      <td>1</td>\n",
       "      <td>37.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1015</td>\n",
       "      <td>0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1016</td>\n",
       "      <td>1</td>\n",
       "      <td>40.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.450</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1017</td>\n",
       "      <td>0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1020</td>\n",
       "      <td>1</td>\n",
       "      <td>33.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   IDnumber  gender  AgeT1  AgeT2  dropoutT2  newT1RInAB  newT2RInAB  \\\n",
       "0      1004       1   37.0   50.0          0        0.81        0.08   \n",
       "1      1015       0   52.0   66.0          0        0.64        0.67   \n",
       "2      1016       1   40.0   54.0          0        0.83        0.64   \n",
       "3      1017       0   40.0   54.0          0        0.83        0.72   \n",
       "4      1020       1   33.0   46.0          0        1.50        0.39   \n",
       "\n",
       "   newT1cutoffRInAB  newT2cutoffRInAB  minimalsymtpomsornotT1  ...  \\\n",
       "0               0.0               0.0                       0  ...   \n",
       "1               0.0               0.0                       0  ...   \n",
       "2               0.0               0.0                       0  ...   \n",
       "3               0.0               0.0                       0  ...   \n",
       "4               0.0               0.0                       1  ...   \n",
       "\n",
       "   DAIdifferencescore  DAIimprovementscore  RInABV4T1  RInABV4CutOffT1  \\\n",
       "0                 0.0                  2.0        NaN              NaN   \n",
       "1                 0.0                  2.0      0.375              0.0   \n",
       "2                -2.0                  0.0      0.450              0.0   \n",
       "3                -2.0                  0.0        NaN              NaN   \n",
       "4                 3.0                  1.0        NaN              NaN   \n",
       "\n",
       "   RInABV4T2  RInABV4CutOffT2  V4_reliability_T1  V4_reliability_T1_Cut_Off  \\\n",
       "0        NaN              NaN                NaN                        NaN   \n",
       "1       0.66              0.0                NaN                        NaN   \n",
       "2       0.64              0.0                NaN                        NaN   \n",
       "3        NaN              NaN                NaN                        NaN   \n",
       "4        NaN              NaN                NaN                        NaN   \n",
       "\n",
       "   V4_reliability_T2  V4_realiability_T2_Cut_Off  \n",
       "0                NaN                         NaN  \n",
       "1                NaN                         NaN  \n",
       "2                NaN                         NaN  \n",
       "3                NaN                         NaN  \n",
       "4                NaN                         NaN  \n",
       "\n",
       "[5 rows x 61 columns]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read the data file\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv(\"/Users/Andrei/Documents/Data/rad_raw_data.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "dai_score = df['DAIscoreT1']\n",
    "rinab_score = df['newT1RInAB']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0    31\n",
       " 1.0    16\n",
       " 2.0    15\n",
       " 4.0    11\n",
       " 3.0     9\n",
       " 5.0     6\n",
       " 6.0     5\n",
       " 8.0     1\n",
       " Name: DAIscoreT1, dtype: int64, count    100.000000\n",
       " mean       0.765000\n",
       " std        0.601276\n",
       " min        0.000000\n",
       " 25%        0.390000\n",
       " 50%        0.640000\n",
       " 75%        0.952500\n",
       " max        3.470000\n",
       " Name: newT1RInAB, dtype: float64)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dai_score.value_counts(), rinab_score.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot histogram for DAI scores \n",
    "plt.figure(figsize=(8,8))\n",
    "plt.hist(dai_score, bins=[0,1,2,3,4,5,6,7,8],facecolor='g')\n",
    "plt.ylabel('Frequency')\n",
    "plt.xlabel('Number of RAD Symptoms')\n",
    "plt.title('Distribution of DAI Symptoms')\n",
    "plt.grid(True)\n",
    "#plt.show()\n",
    "plt.savefig('histogram_dai.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# discretization of the RInAB scores has been done using Doane's rule. This is an extension of Sturge's rule for selecting\n",
    "# the number of bins when constructing a histogram and is used for skewed data. Discretization has been performed using \n",
    "# the 'varrank' package in R and the result was 10 equally-sized intervals\n",
    "\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.hist(rinab_score, facecolor='g', bins = 10)\n",
    "plt.ylabel('Frequency')\n",
    "plt.xlabel('Mean RAD Symptoms')\n",
    "plt.title('Distribution of RInAB Symptoms')\n",
    "plt.grid(True)\n",
    "#plt.show()\n",
    "plt.savefig('histogram_RInAB.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
